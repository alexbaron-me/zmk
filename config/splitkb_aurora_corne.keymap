/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right-hand keys
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys
#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200

&mt { flavor = "tap-preferred"; };

/ {
    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_FAST_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;

            // require-prior-idle-ms = <150>;         // requires PR #1387

            hold-trigger-key-positions = <KEYS_R KEYS_T>;

            // hold-trigger-on-release;             // requires PR #1423
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_FAST_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;

            // require-prior-idle-ms = <150>;         // requires PR #1387

            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // hold-trigger-on-release;             // requires PR #1423
        };

        quote_select: quote_select {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOTE_SELECT";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp DQT>;
        };

        semicolon: semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "SEMICOLON";
            #binding-cells = <0>;
            bindings = <&hm_shift_r LCTRL SEMI>, <&kp COLON>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_game {
            timeout-ms = <50>;
            key-positions = <0 24 35 11>;
            bindings = <&tog 3>;
        };

        combo_capsword_right {
            timeout-ms = <50>;
            key-positions = <19 22>;
            bindings = <&caps_word>;
            layers = <0>;
        };

        combo_capsword_left {
            timeout-ms = <50>;
            key-positions = <16 13>;
            bindings = <&caps_word>;
            layers = <0>;
        };

        temp_num_right {
            bindings = <&tog 5>;
            key-positions = <19 20>;
        };

        temp_num_left {
            bindings = <&tog 5>;
            key-positions = <15 16>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp Q          &kp W         &kp E         &kp R                 &kp T            &kp Y         &kp U                 &kp I         &kp O         &kp P       &kp MINUS
&kp TAB    &hm_l LCTRL A  &hm_l LALT S  &hm_l LGUI D  &hm_shift_l LSHIFT F  &hm_l RALT G     &hm_r RALT H  &hm_shift_r LSHIFT J  &hm_r LGUI K  &hm_r LALT L  &semicolon  &quote_select
&kp GRAVE  &kp Z          &kp X         &kp C         &kp V                 &kp B            &kp N         &kp M                 &kp COMMA     &kp DOT       &kp FSLH    &kp BSLH
                                        &mo 1         &lt 4 SPACE           &kp BACKSPACE    &kp RET       &lt 2 ESCAPE          &mo 1
            >;

            label = "default";
        };

        control {
            bindings = <
&trans           &trans          &trans          &trans          &trans        &trans             &trans        &trans        &trans        &trans        &trans        &out OUT_TOG
&msc SCRL_RIGHT  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT    &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &trans        &trans
&msc SCRL_LEFT   &msc SCRL_UP    &trans          &trans          &trans        &trans             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
                                                 &trans          &trans        &trans             &trans        &trans        &trans
            >;

            label = "control";
        };

        symbols {
            bindings = <
&trans  &kp C_BRI_INC  &kp C_NEXT  &kp C_PP    &kp C_VOL_UP  &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &trans
&trans  &kp EXCL       &kp AT      &kp HASH    &kp DLLR      &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &trans
&trans  &kp C_BRI_DEC  &kp C_PREV  &kp C_MUTE  &kp C_VOL_DN  &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &trans
                                   &trans      &trans        &trans       &trans     &trans     &trans
            >;

            label = "symbol";
        };

        game {
            bindings = <
&kp ESC     &kp Q  &kp W  &kp E      &kp R      &kp T       &kp Y    &kp U    &kp I      &kp O    &kp P     &none
&kp TAB     &kp A  &kp S  &kp D      &kp F      &kp F       &kp H    &kp J    &kp K      &kp L    &kp SEMI  &none
&kp LSHIFT  &kp Z  &kp X  &kp C      &kp V      &kp B       &kp N    &kp M    &kp COMMA  &kp DOT  &kp FSLH  &none
                          &kp LCTRL  &kp SPACE  &kp BKSP    &kp RET  &kp ESC  &mo 1
            >;

            label = "game";
        };

        numrow {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "numrow";
        };

        temp_number {
            bindings = <
&tog 5  &tog 5  &tog 5  &tog 5  &tog 5     &tog 5    &tog 5  &tog 5  &tog 5     &tog 5   &tog 5    &tog 5
&tog 5  &kp N1  &kp N2  &kp N3  &kp N4     &kp N5    &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &tog 5
&tog 5  &tog 5  &tog 5  &tog 5  &tog 5     &tog 5    &tog 5  &tog 5  &kp COMMA  &kp DOT  &kp FSLH  &tog 5
                        &tog 5  &kp SPACE  &tog 5    &tog 5  &tog 5  &tog 5
            >;

            label = "tem_num";
        };
    };
};
